// Code generated by MockGen. DO NOT EDIT.
// Source: internal/banner/repositories/banner_repository.go

// Package mock is a generated GoMock package.
package mock

import (
	models "kasikorn-line-api/internal/banner/repositories/models"
	error "kasikorn-line-api/pkg/error"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBannerRepository is a mock of BannerRepository interface.
type MockBannerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBannerRepositoryMockRecorder
}

// MockBannerRepositoryMockRecorder is the mock recorder for MockBannerRepository.
type MockBannerRepositoryMockRecorder struct {
	mock *MockBannerRepository
}

// NewMockBannerRepository creates a new mock instance.
func NewMockBannerRepository(ctrl *gomock.Controller) *MockBannerRepository {
	mock := &MockBannerRepository{ctrl: ctrl}
	mock.recorder = &MockBannerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBannerRepository) EXPECT() *MockBannerRepositoryMockRecorder {
	return m.recorder
}

// GetBannerByUserID mocks base method.
func (m *MockBannerRepository) GetBannerByUserID(userID string) ([]models.Banner, *error.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBannerByUserID", userID)
	ret0, _ := ret[0].([]models.Banner)
	ret1, _ := ret[1].(*error.ErrorResponse)
	return ret0, ret1
}

// GetBannerByUserID indicates an expected call of GetBannerByUserID.
func (mr *MockBannerRepositoryMockRecorder) GetBannerByUserID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBannerByUserID", reflect.TypeOf((*MockBannerRepository)(nil).GetBannerByUserID), userID)
}
